help( c )
v1 <- c( 1, 3, -2, 4 )
v1
v2 <- 3:7
v2
v3 <- seq( -3, 3, by=0.1 )
v3
v4 <- rep( v1, times=2 )
v4
v4_2 <- rep( v1, each=2 )
v4_2
v5 <- c("a", "a", "b", "c")
v5
v6 <- c( v1, v2 )
v6
v7 <- c (v1, v5)
v7      # 벡터는 동일한 자료형을 갖는 자료의 모임
sort( v1 )
rev( v1 )
table( v5 )
class( table(v5) )
unique( v4 )
# matrix
v4
m1 <- matrix( v4, nrow=4 )
m1
m2 <- matrix( v4, nrow=4, byrow = TRUE )
m2    # 행부터 채우기
class( m2 )
df1 <- data.frame( col1 = v1, col2 = v5 )
df1
class( df1 )
list1 <- list(v = v1, m = m1, df = df1)
list1
class( list1 )
save.image(file = "./data/02.RData")
load(file = "./data/02.RData")
library( tidyverse )
pi
rm(list=ls())
# 연산자
# 산술연산자 : 연산의 결과 숫자
1 + 3
1 - 3
2 * 3
2 / 3
2^3
# 논리연산자 : 연산의 결과가 논리값 (TRUE / FALSE)
1 < 3
1 <= 3
1 > 3
1 >= 3
1 == 3
1 != 3
# 할당연산자 : 우측의 값을 좌측의 변수에 대입
a <- 1
a
b <- 3
b
c <- a + b
c
str1 <- "문자열은 큰 따옴표 혹은 작은 따옴표로 둘러쌉니다."
str2 <- '작은 따옴표'
str3 <- "큰 따옴표 안에 큰 따옴표를 쓰려면, \\를 이용해서 escape 처리를 합니다. \" "
str4 <- "큰 따옴표 안에 작은 따옴표는 그냥 사용하면 됩니다. ' 이렇게요"
# 함수 사용하기 : 함수의 이름과 인수(함수 실행에 필요한 정보)로 구성
# 함수의 구성은 함수의 이름 (인수, 인수,  …, 인수) 의 형태
# 함수 실행 후 함수가 있는 위치에 계산된 값이 전달
# 값을 전달하지 않고 어떤 행위를 하는 함수들도 있음
getwd()       # 인수가 필요없을 경우도 있음
help("plot")
plot(a, b)    # 인수가 여러개일 경우 콤마(,)로 구분
# 도움말 사용하기
?plot
help("plot")
# 패키지 관련
install.packages("dplyr")   # 패키지 설치
select(cars, speed)         # 패키지 내 함수에 바로 접근할 수 없음
dplyr::select(cars, speed)  # 패키지명::함수명 의 형태로 사용할 수 있음
# 조금 더 수월한 사용을 위해 현재 작업공간에서 패키지의 자원(함수, 데이터 등) 사용을 위해
# 이름공간 연결 library( 설치된 패키지명 )
library( dplyr )
# library() 사용이후 패키지 자원의 이름을 바로 불러서 사용할 수 있음
select(cars, speed)
# 위에서 생성한 자료들을 저장합니다 - 현재 변수들이 저장됩니다.
save.image(file = "./data/01.RData")
# 앞의 예에서 저장한 자료들을 불러옵니다.
load(file = "./data/01.RData")
# 자료형 확인하기 : typeof( )
typeof( a )
typeof( str1 )
# 자료형 판별 함수들 : is.xxx()
# a에는 1이 저장되어 있습니다.
is.integer( a )
is.double( a )
is.numeric( a )
# c에는 4가 저장되어 있습니다.
is.integer( a:c )
is.double( a:c )
is.numeric( a:c )
typeof( a:c )
is.logical( a < c )
is.character( a )
is.character( str1 )
# 자료형 변환 함수 as.xxx( )
as.numeric( TRUE )
as.numeric( FALSE )
as.logical( 0 )
as.logical( 1 )
as.character( a )
as.character( TRUE )
# 벡터
v1 <- c( 1, 3, -2, 4 )
v1
v2 <- 3:7
v2
v3 <- seq( -3, 3, by=0.1 )
v3
v4 <- rep( v1, times=2 )
v4
v4_2 <- rep( v1, each=2 )
v4_2
v5 <- c("a", "a", "b", "c")
v5
v6 <- c( v1, v2 )
v6
v7 <- c (v1, v5)
v7      # 벡터는 동일한 자료형을 갖는 자료의 모임
sort( v1 )
rev( v1 )
table( v5 )
class( table(v5) )
unique( v4 )
# matrix
v4
m1 <- matrix( v4, nrow=4 )
m1
m2 <- matrix( v4, nrow=4, byrow = TRUE )
m2    # 행부터 채우기
class( m2 )
## factor
gender <- c(1, 2, 2, 2, 1)
gender
gender.f <- factor(gender, levels=c(1, 2), labels=c("여성", "남성"))
gender.f
levels( gender.f )
class( gender.f )
# 데이터 프레임
df1 <- data.frame( col1 = v1, col2 = v5 )
df1
class( df1 )
dim( df1 )
nrow( df1 )
ncol( df1 )
names( df1 )
head( df1 )
head( df1, n=2 )
tail( df1, n=2 )
str( df1 )
# 합치기 : 이름이 있는 행렬 혹은 데이터 프레임
# 벡터끼리의 합치기는 행렬로, 데이터 프레임이 있을 시 데이터 프레임으로
# as.data.frame() 함수로 데이터프레임으로 변경가능
mat1 <- cbind( v1, v5 )
mat1
str( mat1 )
mat2 <- rbind( v1, v5 )
mat2
mat3 <- cbind( df1, v1 )
mat3
mat4 <- as.data.frame( mat1 )
mat4
# list
list1 <- list(v = v1, m = m1, df = df1)
list1
class( list1 )
save.image(file = "./data/02.RData")
save.image(file = "./data/02.RData")
load(file = "./data/02.RData")
# 자료구조의 일부분 추출하기
# 위치값을 이용해서 가져오기
# vector (factor도 동일)
v3
v3[3]
v3[-3]
v3[1:3]
v3[c(1, 3, 4)]
# Matrix (2차원의 경우 Data frame도 동일)
m1
m1[1, ]
m1[, 1]
m1[2:3, 1:2]
# Data frame과 List : 하위 요소 이름으로 추출
df1$col1
list1$m
# 다음 두 결과물은 어떤 자료구조일까요?
list1[2]
list1[[2]]
class( list1[2] )
class( list1[[2]] )
# 조건을 만족하는 값 추출하기
v3 %% 2 == 0
v3[v3 %% 2 == 0]
which( v3 %% 2 == 0 )
v3[which( v3 %% 2 == 0 )]
library( tidyverse )
pInfo <- readRDS("./data/03.PI.rds")
class( pInfo )
head( pInfo )
as_tibble(pInfo)
pInfo <- readRDS("./data/03.PI.rds")
class( pInfo )
head( pInfo )
as_tibble(pInfo)
# data from https://www.kaggle.com/kimjihoo/coronavirusdataset
pInfo <- readRDS("./data/03.PI.rds")
pInfo
as_tibble( pInfo )
### filter()
filter(pInfo, state == "released" )
as_tibble( pInfo )
### filter()
filter(pInfo, state == "released" )
pInfo <- as_tibble(pInfo)
### filter()
filter(pInfo, state == "released" )
filter(pInfo, province == "Daegu", state == "released" )
### select()
select(pInfo, patient_id, sex, age, country)
select(pInfo, ends_with("date"))
### mutate()
mutate(pInfo, age2 = 2020 - birth_year )
### mutate()
View( mutate(pInfo, age2 = 2020 - birth_year ) )
arrange(pInfo, birth_year )
arrange(pInfo, desc(birth_year) )
arrange(pInfo, birth_year )
arrange(pInfo, desc(birth_year) )
pInfo2 <- mutate(pInfo, age2 = 2020 - birth_year )
summarise(pInfo2,
n = n(),
mean.age = mean(age2, na.rm=TRUE)
)
pInfo2_grp <- group_by(pInfo2, sex)
summarise(pInfo2_grp,
n = n(),
mean.age = mean(age2, na.rm=TRUE)
)
pInfo %>%
mutate( age2 = 2020 - birth_year ) %>%
group_by(sex) %>%
summarise(
n = n(),
mean.age = mean(age2, na.rm=TRUE)
)
